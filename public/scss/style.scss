// ==================================
// VARIABLES
// ==================================
:root {
  --header-height: 5.5em;
  --side-bar-width: 7.5em;
  --side-menu-width: 24em;
  --side-closed-width: 2em;
  --padding-top: 2.6em;
  --padding-left: 4.2em;
  --padding-right: 4em;
  --content-padding-top: 3.6em;
}


// ==================================
// MIXINS & FUNCTIONS
// ==================================

@mixin custom-respond($value) {
    @media(max-width: $value * 1px) {
      @content;
    }
  }
  
  @mixin custom-respond-vertical($value) {
    @media(max-height: $value * 1px) {
      @content;
    }
  }
  
  @mixin respond($breakpoint) {
    @if $breakpoint==desktop-xxsm {
      @media (max-width: 379px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-xsm {
      @media (max-width: 575px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-sm {
      @media (max-width: 767px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-md {
      @media (max-width: 991px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-lg {
      @media (max-width: 1199px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-xl {
      @media (max-width: 1379px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-xxl {
      @media (max-width: 1720px) {
        @content;
      }
    }
  
    @if $breakpoint==desktop-xxxl {
      @media (max-width: 1900px) {
        @content;
      }
    }
  }
  
  @function resize($base, $value) {
    $result: $base * $value;
    @return $result;
  }
  
  @function emcalc($base, $value) {
    $result: $base / $value;
    @return $result * 1em;
  }
  
  // Flexbox Mixins
  // http://philipwalton.github.io/solved-by-flexbox/
  // https://github.com/philipwalton/solved-by-flexbox
  // 
  // Copyright (c) 2013 Brian Franco
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to
  // permit persons to whom the Software is furnished to do so, subject to
  // the following conditions:
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  // IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  // CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  // TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
  // SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  //
  // This is a set of mixins for those who want to mess around with flexbox
  // using the native support of current browsers. For full support table
  // check: http://caniuse.com/flexbox
  //
  // Basically this will use:
  //
  // * Fallback, old syntax (IE10, mobile webkit browsers - no wrapping)
  // * Final standards syntax (FF, Safari, Chrome, IE11, Opera)
  //
  // This was inspired by:
  // 
  // * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
  // 
  // With help from:
  // 
  // * http://w3.org/tr/css3-flexbox/
  // * http://the-echoplex.net/flexyboxes/
  // * http://msdn.microsoft.com/en-us/library/ie/hh772069(v=vs.85).aspx
  // * http://css-tricks.com/using-flexbox/
  // * http://dev.opera.com/articles/view/advanced-cross-browser-flexbox/
  // * https://developer.mozilla.org/en-us/docs/web/guide/css/flexible_boxes
  
  //----------------------------------------------------------------------
  
  // Flexbox Containers
  //
  // The 'flex' value causes an element to generate a block-level flex
  // container box.
  //
  // The 'inline-flex' value causes an element to generate a inline-level
  // flex container box. 
  //
  // display: flex | inline-flex
  //
  // http://w3.org/tr/css3-flexbox/#flex-containers
  //
  // (Placeholder selectors for each type, for those who rather @extend)
  
  @mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
  }
  
  // %flexbox { @include flexbox; }
  
  //----------------------------------
  
  @mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
  
  // %inline-flex { @include inline-flex; }
  
  //----------------------------------------------------------------------
  
  // Flexbox Direction
  //
  // The 'flex-direction' property specifies how flex items are placed in
  // the flex container, by setting the direction of the flex container's
  // main axis. This determines the direction that flex items are laid out in. 
  //
  // Values: row | row-reverse | column | column-reverse
  // Default: row
  //
  // http://w3.org/tr/css3-flexbox/#flex-direction-property
  
  @mixin flex-direction($value: row) {
    @if $value==row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
    }
  
    @else if $value==column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
    }
  
    @else if $value==column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
    }
  
    @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
    }
  
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
  }
  
  // Shorter version:
  @mixin flex-dir($args...) {
    @include flex-direction($args...);
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Wrap
  //
  // The 'flex-wrap' property controls whether the flex container is single-line
  // or multi-line, and the direction of the cross-axis, which determines
  // the direction new lines are stacked in. 
  //
  // Values: nowrap | wrap | wrap-reverse
  // Default: nowrap
  //
  // http://w3.org/tr/css3-flexbox/#flex-wrap-property
  
  @mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
  
    @if $value==nowrap {
      -ms-flex-wrap: none;
    }
  
    @else {
      -ms-flex-wrap: $value;
    }
  
    flex-wrap: $value;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Flow (shorthand)
  //
  // The 'flex-flow' property is a shorthand for setting the 'flex-direction'
  // and 'flex-wrap' properties, which together define the flex container's
  // main and cross axes.
  //
  // Values: <flex-direction> | <flex-wrap> 
  // Default: row nowrap
  //
  // http://w3.org/tr/css3-flexbox/#flex-flow-property
  
  @mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Order
  //
  // The 'order' property controls the order in which flex items appear within
  // their flex container, by assigning them to ordinal groups.
  //
  // Default: 0
  //
  // http://w3.org/tr/css3-flexbox/#order-property
  
  @mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Grow
  //
  // The 'flex-grow' property sets the flex grow factor. Negative numbers
  // are invalid.
  //
  // Default: 0
  //
  // http://w3.org/tr/css3-flexbox/#flex-grow-property
  
  @mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Shrink
  //
  // The 'flex-shrink' property sets the flex shrink factor. Negative numbers
  // are invalid.
  //
  // Default: 1
  //
  // http://w3.org/tr/css3-flexbox/#flex-shrink-property
  
  @mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Basis
  //
  // The 'flex-basis' property sets the flex basis. Negative lengths are invalid. 
  //
  // Values: Like "width" 
  // Default: auto
  //
  // http://www.w3.org/TR/css3-flexbox/#flex-basis-property
  
  @mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox "Flex" (shorthand)
  //
  // The 'flex' property specifies the components of a flexible length: the
  // flex grow factor and flex shrink factor, and the flex basis. When an
  // element is a flex item, 'flex' is consulted instead of the main size
  // property to determine the main size of the element. If an element is
  // not a flex item, 'flex' has no effect.
  //
  // Values: none | <flex-grow> <flex-shrink> || <flex-basis>
  // Default: See individual properties (1 1 0).
  //
  // http://w3.org/tr/css3-flexbox/#flex-property
  
  @mixin flex($fg: 1, $fs: null, $fb: null) {
  
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
  
    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg)=='list' {
      $fg-boxflex: nth($fg, 1);
    }
  
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Justify Content
  //
  // The 'justify-content' property aligns flex items along the main axis
  // of the current line of the flex container. This is done after any flexible
  // lengths and any auto margins have been resolved. Typically it helps distribute
  // extra free space leftover when either all the flex items on a line are
  // inflexible, or are flexible but have reached their maximum size. It also
  // exerts some control over the alignment of items when they overflow the line.
  //
  // Note: 'space-*' values not supported in older syntaxes.
  //
  // Values: flex-start | flex-end | center | space-between | space-around
  // Default: flex-start
  //
  // http://w3.org/tr/css3-flexbox/#justify-content-property
  
  @mixin justify-content($value: flex-start) {
    @if $value==flex-start {
      -webkit-box-pack: start;
      -ms-flex-pack: start;
    }
  
    @else if $value==flex-end {
      -webkit-box-pack: end;
      -ms-flex-pack: end;
    }
  
    @else if $value==space-between {
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
    }
  
    @else if $value==space-around {
      -ms-flex-pack: distribute;
    }
  
    @else {
      -webkit-box-pack: $value;
      -ms-flex-pack: $value;
    }
  
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
  }
  
  // Shorter version:
  @mixin flex-just($args...) {
    @include justify-content($args...);
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Align Items
  //
  // Flex items can be aligned in the cross axis of the current line of the
  // flex container, similar to 'justify-content' but in the perpendicular
  // direction. 'align-items' sets the default alignment for all of the flex
  // container's items, including anonymous flex items. 'align-self' allows
  // this default alignment to be overridden for individual flex items. (For
  // anonymous flex items, 'align-self' always matches the value of 'align-items'
  // on their associated flex container.) 
  //
  // Values: flex-start | flex-end | center | baseline | stretch
  // Default: stretch
  //
  // http://w3.org/tr/css3-flexbox/#align-items-property
  
  @mixin align-items($value: stretch) {
    @if $value==flex-start {
      -webkit-box-align: start;
      -ms-flex-align: start;
    }
  
    @else if $value==flex-end {
      -webkit-box-align: end;
      -ms-flex-align: end;
    }
  
    @else {
      -webkit-box-align: $value;
      -ms-flex-align: $value;
    }
  
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
  }
  
  //----------------------------------
  
  // Flexbox Align Self
  //
  // Values: auto | flex-start | flex-end | center | baseline | stretch
  // Default: auto
  
  @mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
  
    @if $value==flex-start {
      -ms-flex-item-align: start;
    }
  
    @else if $value==flex-end {
      -ms-flex-item-align: end;
    }
  
    @else {
      -ms-flex-item-align: $value;
    }
  
    align-self: $value;
  }
  
  //----------------------------------------------------------------------
  
  // Flexbox Align Content
  //
  // The 'align-content' property aligns a flex container's lines within the
  // flex container when there is extra space in the cross-axis, similar to
  // how 'justify-content' aligns individual items within the main-axis. Note,
  // this property has no effect when the flexbox has only a single line.
  //
  // Values: flex-start | flex-end | center | space-between | space-around | stretch
  // Default: stretch
  //
  // http://w3.org/tr/css3-flexbox/#align-content-property
  
  @mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
  
    @if $value==flex-start {
      -ms-flex-line-pack: start;
    }
  
    @else if $value==flex-end {
      -ms-flex-line-pack: end;
    }
  
    @else {
      -ms-flex-line-pack: $value;
    }
  
    align-content: $value;
  }
  
  
  
  
  // Ensure CSS grid works with IE 11 spec.
  // https://css-tricks.com/browser-compatibility-css-grid-layouts-simple-sass-mixins/
  // sass-lint:disable no-vendor-prefixes, no-duplicate-properties
  @mixin grid {
    display: -ms-grid;
    display: grid;
  }
  
  // $columns values should be delimited by a space
  @mixin grid-template-columns($columns...) {
    -ms-grid-columns: $columns;
    grid-template-columns: $columns;
  }
  
  // $rows values should be delimited by a space
  @mixin grid-template-rows($rows...) {
    -ms-grid-rows: $rows;
    grid-template-rows: $rows;
  }
  
  // Can be used in combination with above grid-template-X mixins.
  // These result in the same output:
  // @include grid-template-columns(10px grid-repeat(4, 20px) 30px);
  // @include grid-template-columns(10px 20px 20px 20px 20px 30px);
  @function grid-repeat($repeat, $stuff: 1fr) {
    $list: ();
  
    @for $i from 1 through $repeat {
      $list: append($list, $stuff, space);
    }
  
    @return $list;
  }
  
  @mixin grid-column($col-start, $col-end) {
    -ms-grid-column: $col-start;
    -ms-grid-column-span: $col-end - $col-start;
    grid-column: #{$col-start} / #{$col-end};
  }
  
  @mixin grid-row($row-start, $row-end) {
    -ms-grid-row: $row-start;
    -ms-grid-row-span: $row-end - $row-start;
    grid-row: #{$row-start} / #{$row-end};
  }
  
  @mixin grid-align-self($value) {
    -ms-grid-row-align: $value;
    align-self: $value;
  }
  
  @mixin grid-justify-self($value) {
    -ms-grid-column-align: $value;
    justify-self: $value;
  }
  
  @mixin target-ie {
  
    @media all and (-ms-high-contrast: none),
    (-ms-high-contrast: active) {
      @content;
    }
  
    @supports (-ms-ime-align:auto) {
      @content;
    }
  }
  
  
  // ==================================
  // GENERAL SETTINGS
  // ==================================
  *,
  *::after,
  *::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
  }
  
  html {
    font-size: 62.5%;
  }
  
  body {
    box-sizing: border-box;
    margin-left: calc(var(--side-menu-width) + var(--side-bar-width) + var(--padding-left));
    margin-top: calc(var(--header-height) + var(--padding-top));
    margin-right: var(--padding-right);
    min-width: 0;
    width: calc(100vw - var(--side-menu-width) - var(--side-bar-width) - var(--padding-left) - var(--padding-right));  
    max-width: 100vw;
    font-family: 'Inter', sans-serif!important;
    font-size: 1rem;
    transition: all .5s ease-in-out;
    transition-property: height width margin-left margin-top;
  
    // overflow-y: auto;
    // scrollbar-width: none;
    // /* Firefox */
    // -ms-overflow-style: none;
    // /* Internet Explorer 10+ */

    // &::-webkit-scrollbar {
    // /* WebKit */
    // width: 0;
    // height: 0;
    // }
  }

  //HEADER
  .header {
    padding-left: 3.2em;
    padding-right: 2.3em;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 5.5em;
    background-color: #b0bbc6;
    z-index: 1000;
    opacity: 1;
    visibility: visible;
    transition: all .5s ease-in-out;
    transition-property: height opacity visibility;

    @include flexbox();
    @include align-items(center);
    @include justify-content(space-between);

    &-list {
      @include flexbox();
      @include align-items(center);
      @include justify-content(flex-start);
      list-style: none;
    }

    &-close {
      top: -5.5em;
      opacity: 0;
      visibility: hidden;
    }
  }

  //SIDE ELEMENT
  .side {
    height: calc(100% - var(--header-height));
    max-height: 100vh;
    @include flexbox();
    @include align-items(flex-start);
    @include justify-content(flex-start);
    position: fixed;
    top: var(--header-height);
    left: 0;
    transition: all .5s ease-in-out;
    transition-property: height width;
    opacity: 1;
    visibility: visible;
    z-index: 900;

    &-close {
      left: -24em;
      opacity: 0;
      visibility: hidden;
    }

    &-bar {
      height: 100%;
      width: 7.5em;
      background-color: #0c52cc;
      transition: all .5s ease-in-out;
      z-index: 100;

      &-close {
        margin-left: -6em;
      }
    }

    &-menu {
      height: 100%;
      width: 24em;
      background-color: #f6f7f8;
      transition: all .5s ease-in-out;
      z-index: 50;

      &-close {
        margin-left: -24em;
      }
    }
  }

  //PAGE HEADER
  .page-header {
    width: inherit;
    top: calc(var(--header-height) + var(--padding-top));
    background-color: #FFF;
    z-index: 800;

    &-list {
      @include flexbox();
      @include align-items(center);
      @include justify-content(flex-start);
      list-style: none;
    }
  }

  //PAGE CONTENT
  .page-content {
    width: 100%;
    margin-top: var(--content-padding-top);
    height: calc(100vh - var(--header-height) - var(--padding-top) - var(--content-padding-top) - 5.04em)!important;
    background-color: #f6f7f8;
    transition: all .5s ease-in-out;
    transition-property: height width;


        overflow-y: auto;
    scrollbar-width: none;
    /* Firefox */
    -ms-overflow-style: none;
    /* Internet Explorer 10+ */

    &::-webkit-scrollbar {
    /* WebKit */
    width: 0;
    height: 0;
    }
  }
  
  
  
  